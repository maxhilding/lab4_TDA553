Laboration 4: Designmönster och refactoring

Uppgift 1: Refaktorisera
Gör de förändringar som ni identifierat i del 3, i enlighet med er refaktoreringsplan.

Uppgift 2: Model-View-Controller
Användargränssnittet ni utgick från i del 3 var en ansats till implementation av Model-View-Controller Pattern, men där gränsdragningen mellan model, view, controller och applikation inte var något vidare genomtänkt (för att inte säga usel).

Vilka avvikelser från MVC-idealet kan ni identifiera i det ursprungliga användargränssnittet? Vad borde ha gjorts smartare, dummare eller tunnare?
*View ska vara dum. Men i det ursprungliga så genomförde den beräkningar för förflyttning (ska vara i modellen) och tog input (ska vara i controller).
*Controller ska vara tunn. I det ursprungliga var CarController snarare som en application och en model. Den intitierade simuleringen, hade loopen för simuleringen, genomförde beräkningar för spellogik och anropade delar av modellen efter input från viewen.
*Egentligen borde CarController bara ta input och anropa modellen.
*Angående modellen så borde den ha haft mer logik hos sig.

Vilka av dessa brister åtgärdade ni med er nya design från del 3? Hur då?
*Flyttade addActionListener till CarController från CarView
*Införde ett cargameobject och repairshopgameobject klasser med privat parent som bara gav x, y och bilden. Detta gavs till CarView för att målas. Denna lösning blev bra i den benämning att inte blev beroende mellan CarView och Car. Dock blev det konstigt då modellens metoder skulle anropas eftersom vi inte hade en separat uppsättning med cars och repairshops, utan bara gameobjects.
*Läsa in bilder förflyttades från drawpanel till CarController

Vilka brister åtgärdade ni inte?
*CarController är för bred. Behöver introducera en applikation som tar över mycket ansvar.
*Utöka modellen eventuellt med collision detection och liknande.
*Tydligare separation av MVC+applikation, modularisering.
Rita ett nytt UML-diagram som beskriver en förbättrad design med avseende på MVC.





Uppgift 3: Fler designmönster
Observer, Factory Method, State, Composite. För vart och ett av dessa fyra designmönster, svara på följande frågor:
Finns det något ställe i er design där ni redan använder detta pattern, avsiktligt eller oavsiktligt? Vilka designproblem löste ni genom att använda det?
Finns det något ställe där ni kan förbättra er design genom att använda detta design pattern? Vilka designproblem skulle ni lösa genom att använda det? Om inte, varför skulle er design inte förbättras av att använda det?

Observer
*Enligt vår plan ska observer pattern används genom att modellen har en lista med listeners som meddelas att agera för varje tidsenhet i game-loopen eller vid andra uppdateringar i modellen. Fördelen med detta är att modellen kan användas med flera olika vyer och utan att modellen behöver känna till dem.
Factory Method
*Vi planerar att applikationen ska anropa en factory som skapar instanser vilket döljer implementeringen som till exempel vilka specifika klasser som faktiskt används. Vi kommer även att göra konstruktorer package-private för klasserna som är objekt i spelet för att uppnå detta.
State
*När det kommer till olika states för fordon har vi isDriveable i baseCar som exempelvis blir false när en bil lagras i en verkstad eller då en lastbil som har flaket uppe. Dock är det inget renodlat state pattern som används, eftersom vi inte använder ett interface för olika “sorters” drivable.
Composite
*Vi ska använda en CarSet och en RepairshopSet så att modellen kan anropa metoder på bilarna, respektive verkstäderna som ett enskilt objekt. Inuti dessa s.k set-klasser finns for-loopar som anropar metoder på de enskilda instanserna.

Uppdatera er design med de förbättringar ni identifierat.
Uppgift 4: Refaktorisering igen
Implementera slutligen de designförbättringar ni identifierat i alla tidigare uppgifter.

Uppgift 5: Utöka användargränssnittet
Implementera funktionalitet för att lägga till och ta bort bilar via GUI:t. Kan ni implementera detta utan att behöva förändra existerande klassfiler?

*Ja, det är möjligt. En klass som har tillgång till frame och model (samt dess CarSet) kan göra detta.

Skapa knappar för "Add car" och "Remove car" med följande funktionalitet:
"Add car" ska antingen generera en slumpmässig bil eller en given bil.
"Remove car" ska ta bort någon bil - välj själva hur det avgörs vilken.
Om inga bilar finns ska "Remove car" inte ha någon effekt, och om det finns 10 bilar ska "Add car" inte ha någon effekt. (OBS: Det måste inte vara just 10 som är gränsen, ni kan sätta en annan siffra om det gör det lättare med upplösningen.)
Kan något designmönster vara relevant att använda för denna utökning?

*Chain of responsibility.
